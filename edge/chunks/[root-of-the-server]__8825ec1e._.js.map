{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/crypto.ts"],"sourcesContent":["import 'server-only';\nimport { SignJWT, jwtVerify } from 'jose';\n\nconst secretKey = process.env.SESSION_SECRET;\nconst key = new TextEncoder().encode(secretKey);\n\nexport async function encrypt(payload: any) {\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('24h')\n    .sign(key);\n}\n\nexport async function decrypt(input: string): Promise<any> {\n  try {\n    const { payload } = await jwtVerify(input, key, {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (error) {\n    // This will be caught for expired tokens, invalid tokens, etc.\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,cAAc;AAC5C,MAAM,MAAM,IAAI,cAAc,MAAM,CAAC;AAE9B,eAAe,QAAQ,OAAY;IACxC,OAAO,MAAM,IAAI,8JAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,OAClB,IAAI,CAAC;AACV;AAEO,eAAe,QAAQ,KAAa;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,gKAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;YAC9C,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,+DAA+D;QAC/D,OAAO;IACT;AACF"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { decrypt } from '@/lib/crypto';\nimport { cookies } from 'next/headers';\n\nconst PROTECTED_ROUTES = ['/admin'];\nconst PUBLIC_ROUTES = ['/admin/login'];\n\nexport default async function middleware(req: NextRequest) {\n  const path = req.nextUrl.pathname;\n  const isProtectedRoute = PROTECTED_ROUTES.some((route) => path.startsWith(route));\n  const isPublicRoute = PUBLIC_ROUTES.includes(path);\n\n  const cookie = cookies().get('session')?.value;\n  const session = cookie ? await decrypt(cookie) : null;\n  \n  if (isProtectedRoute && !session) {\n    return NextResponse.redirect(new URL('/admin/login', req.nextUrl));\n  }\n\n  if (isPublicRoute && session) {\n    return NextResponse.redirect(new URL('/admin', req.nextUrl));\n  }\n  \n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AAAA;;;;AAEA,MAAM,mBAAmB;IAAC;CAAS;AACnC,MAAM,gBAAgB;IAAC;CAAe;AAEvB,eAAe,WAAW,GAAgB;IACvD,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ;IACjC,MAAM,mBAAmB,iBAAiB,IAAI,CAAC,CAAC,QAAU,KAAK,UAAU,CAAC;IAC1E,MAAM,gBAAgB,cAAc,QAAQ,CAAC;IAE7C,MAAM,SAAS,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,YAAY;IACzC,MAAM,UAAU,SAAS,MAAM,CAAA,GAAA,4HAAA,CAAA,UAAO,AAAD,EAAE,UAAU;IAEjD,IAAI,oBAAoB,CAAC,SAAS;QAChC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,IAAI,OAAO;IAClE;IAEA,IAAI,iBAAiB,SAAS;QAC5B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,OAAO;IAC5D;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAkD;AAC9D"}}]
}