{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-powered-vehicle-recommendations.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI-powered vehicle recommendation flow.\n *\n * This file defines a Genkit flow that takes user preferences as input and returns vehicle recommendations.\n *\n * @exports vehicleRecommendations - The main function to get vehicle recommendations.\n * @exports VehicleRecommendationsInput - The input type for the vehicleRecommendations function.\n * @exports VehicleRecommendationsOutput - The output type for the vehicleRecommendations function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VehicleRecommendationsInputSchema = z.object({\n  budget: z.number().describe('The budget for the vehicle in USD.'),\n  type: z.string().describe('The desired type of vehicle (e.g., sedan, truck, SUV).'),\n});\nexport type VehicleRecommendationsInput = z.infer<typeof VehicleRecommendationsInputSchema>;\n\nconst VehicleRecommendationsOutputSchema = z.object({\n  recommendations: z.array(\n    z.object({\n      model: z.string().describe('The model of the recommended vehicle.'),\n      year: z.number().describe('The year of the recommended vehicle.'),\n      mileage: z.number().describe('The mileage of the recommended vehicle.'),\n      price: z.number().describe('The price of the recommended vehicle in USD.'),\n      description: z.string().describe('A short description of the vehicle.'),\n    })\n  ).describe('A list of recommended vehicles.'),\n});\nexport type VehicleRecommendationsOutput = z.infer<typeof VehicleRecommendationsOutputSchema>;\n\nexport async function vehicleRecommendations(input: VehicleRecommendationsInput): Promise<VehicleRecommendationsOutput> {\n  return vehicleRecommendationsFlow(input);\n}\n\nconst vehicleRecommendationsPrompt = ai.definePrompt({\n  name: 'vehicleRecommendationsPrompt',\n  input: {schema: VehicleRecommendationsInputSchema},\n  output: {schema: VehicleRecommendationsOutputSchema},\n  prompt: `You are an expert vehicle recommendation system for LMC Motors. Based on the user's specified budget and vehicle type, recommend the most suitable vehicles from LMC Motors.\n\nBudget: {{{budget}}}\nVehicle Type: {{{type}}}\n\nReturn the recommendations in JSON format.`,\n});\n\nconst vehicleRecommendationsFlow = ai.defineFlow(\n  {\n    name: 'vehicleRecommendationsFlow',\n    inputSchema: VehicleRecommendationsInputSchema,\n    outputSchema: VehicleRecommendationsOutputSchema,\n  },\n  async input => {\n    const {output} = await vehicleRecommendationsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;;;CAQC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACtB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC7B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,IACA,QAAQ,CAAC;AACb;AAGO,eAAe,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;0CAK+B,CAAC;AAC3C;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,6BAA6B;IACpD,OAAO;AACT;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { z } from \"zod\";\n\nconst inquirySchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\"),\n  email: z.string().email(\"Please enter a valid email address.\"),\n  message: z.string().min(10, \"Message must be at least 10 characters.\"),\n  vehicle: z.string(),\n});\n\nexport async function submitInquiry(prevState: any, formData: FormData) {\n  const validatedFields = inquirySchema.safeParse({\n    name: formData.get(\"name\"),\n    email: formData.get(\"email\"),\n    message: formData.get(\"message\"),\n    vehicle: formData.get(\"vehicle\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: \"Error: Please check the form fields.\",\n    };\n  }\n  \n  // In a real application, you would send an email, save to a database, etc.\n  console.log(\"New Inquiry Received:\", validatedFields.data);\n\n  return {\n    message: \"Success! Your inquiry has been sent.\",\n    errors: {},\n  };\n}\n\nconst prebookSchema = z.object({\n  inGameName: z.string().min(2, \"In-game name must be at least 2 characters.\"),\n  discordId: z.string().min(2, \"Discord ID must be at least 2 characters.\"),\n  pickupTimeFrom: z.string().nonempty(\"Please select a 'from' time.\"),\n  pickupTimeTo: z.string().nonempty(\"Please select a 'to' time.\"),\n  vehicle: z.string(),\n});\n\nexport async function prebookVehicle(prevState: any, formData: FormData) {\n    const validatedFields = prebookSchema.safeParse({\n        inGameName: formData.get(\"inGameName\"),\n        discordId: formData.get(\"discordId\"),\n        pickupTimeFrom: formData.get(\"pickupTimeFrom\"),\n        pickupTimeTo: formData.get(\"pickupTimeTo\"),\n        vehicle: formData.get(\"vehicle\"),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            errors: validatedFields.error.flatten().fieldErrors,\n            message: \"Error: Please check the form fields.\",\n        };\n    }\n\n    // In a real application, you would save this pre-booking to a database.\n    console.log(\"New Pre-booking Received:\", validatedFields.data);\n    \n    const { inGameName, discordId, pickupTimeFrom, pickupTimeTo, vehicle } = validatedFields.data;\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n\n    if (webhookUrl) {\n      const discordMessage = {\n        embeds: [{\n          title: \"New Vehicle Pre-booking! ðŸš—\",\n          color: 5814783,\n          fields: [\n            { name: \"Vehicle\", value: vehicle, inline: false },\n            { name: \"In-Game Name\", value: inGameName, inline: true },\n            { name: \"Discord ID\", value: discordId, inline: true },\n            { name: \"Pickup Time\", value: `From ${pickupTimeFrom} to ${pickupTimeTo}`, inline: false },\n          ],\n          timestamp: new Date().toISOString(),\n          footer: {\n            text: \"LMC Motors Pre-booking System\"\n          }\n        }]\n      };\n\n      try {\n        await fetch(webhookUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(discordMessage),\n        });\n      } catch (error) {\n        console.error(\"Failed to send Discord notification:\", error);\n        // We don't want to block the user flow if Discord fails.\n      }\n    }\n\n\n    return {\n        message: `Success! You've pre-booked the ${validatedFields.data.vehicle}. We will contact you shortly.`,\n        errors: {},\n    };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/finder/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {vehicleRecommendations as '40fc48d47f6216e920a0eb9b0402785ad872e214ac'} from 'ACTIONS_MODULE0'\nexport {prebookVehicle as '60b1378917791b3946bf26d792a336723fe287bc1f'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/finder-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/finder-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/finder-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","debugId":null}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/finder-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/finder-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/finder-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8Q,GAC3S,4CACA","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finder/page.tsx"],"sourcesContent":["import FinderForm from '@/components/finder-form';\n\nexport default function FinderPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <div className=\"mx-auto max-w-3xl text-center\">\n        <h1 className=\"font-headline text-4xl font-bold md:text-5xl\">AI-Powered Vehicle Finder</h1>\n        <p className=\"mt-4 text-lg text-muted-foreground\">\n          Tell us what you're looking for, and our smart assistant will find the best options from our inventory.\n        </p>\n      </div>\n      <div className=\"mt-12\">\n        <FinderForm />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA+C;;;;;;kCAC7D,8OAAC;wBAAE,WAAU;kCAAqC;;;;;;;;;;;;0BAIpD,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,oIAAA,CAAA,UAAU;;;;;;;;;;;;;;;;AAInB","debugId":null}}]
}